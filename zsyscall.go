// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package main

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modforwarding = syscall.NewLazyDLL("forwarding.dll")

	procforwarding_udp_new         = modforwarding.NewProc("forwarding_udp_new")
	procforwarding_udp_delete      = modforwarding.NewProc("forwarding_udp_delete")
	procforwarding_udp_start       = modforwarding.NewProc("forwarding_udp_start")
	procforwarding_udp_stop        = modforwarding.NewProc("forwarding_udp_stop")
	procforwarding_udp_addEntry    = modforwarding.NewProc("forwarding_udp_addEntry")
	procforwarding_udp_removeEntry = modforwarding.NewProc("forwarding_udp_removeEntry")
	procforwarding_tcp_new         = modforwarding.NewProc("forwarding_tcp_new")
	procforwarding_tcp_delete      = modforwarding.NewProc("forwarding_tcp_delete")
	procforwarding_tcp_start       = modforwarding.NewProc("forwarding_tcp_start")
	procforwarding_tcp_stop        = modforwarding.NewProc("forwarding_tcp_stop")
	procforwarding_tcp_addEntry    = modforwarding.NewProc("forwarding_tcp_addEntry")
	procforwarding_tcp_removeEntry = modforwarding.NewProc("forwarding_tcp_removeEntry")
)

func forwarding_udp_new() (ptr uintptr) {
	r0, _, _ := syscall.Syscall(procforwarding_udp_new.Addr(), 0, 0, 0, 0)
	ptr = uintptr(r0)
	return
}

func forwarding_udp_delete(ptr uintptr) {
	syscall.Syscall(procforwarding_udp_delete.Addr(), 1, uintptr(ptr), 0, 0)
	return
}

func forwarding_udp_start(ptr uintptr) {
	syscall.Syscall(procforwarding_udp_start.Addr(), 1, uintptr(ptr), 0, 0)
	return
}

func forwarding_udp_stop(ptr uintptr) {
	syscall.Syscall(procforwarding_udp_stop.Addr(), 1, uintptr(ptr), 0, 0)
	return
}

func forwarding_udp_addEntry(ptr uintptr, localport uint16, remotePort uint32, remoteAddress string) (err error) {
	var _p0 *byte
	_p0, err = syscall.BytePtrFromString(remoteAddress)
	if err != nil {
		return
	}
	return _forwarding_udp_addEntry(ptr, localport, remotePort, _p0)
}

func _forwarding_udp_addEntry(ptr uintptr, localport uint16, remotePort uint32, remoteAddress *byte) (err error) {
	r1, _, e1 := syscall.Syscall6(procforwarding_udp_addEntry.Addr(), 4, uintptr(ptr), uintptr(localport), uintptr(remotePort), uintptr(unsafe.Pointer(remoteAddress)), 0, 0)
	if r1 != 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func forwarding_udp_removeEntry(ptr uintptr, localport uint16) {
	syscall.Syscall(procforwarding_udp_removeEntry.Addr(), 2, uintptr(ptr), uintptr(localport), 0)
	return
}

func forwarding_tcp_new() (ptr uintptr) {
	r0, _, _ := syscall.Syscall(procforwarding_tcp_new.Addr(), 0, 0, 0, 0)
	ptr = uintptr(r0)
	return
}

func forwarding_tcp_delete(ptr uintptr) {
	syscall.Syscall(procforwarding_tcp_delete.Addr(), 1, uintptr(ptr), 0, 0)
	return
}

func forwarding_tcp_start(ptr uintptr) {
	syscall.Syscall(procforwarding_tcp_start.Addr(), 1, uintptr(ptr), 0, 0)
	return
}

func forwarding_tcp_stop(ptr uintptr) {
	syscall.Syscall(procforwarding_tcp_stop.Addr(), 1, uintptr(ptr), 0, 0)
	return
}

func forwarding_tcp_addEntry(ptr uintptr, localport uint16, remotePort uint32, remoteAddress string) (err error) {
	var _p0 *byte
	_p0, err = syscall.BytePtrFromString(remoteAddress)
	if err != nil {
		return
	}
	return _forwarding_tcp_addEntry(ptr, localport, remotePort, _p0)
}

func _forwarding_tcp_addEntry(ptr uintptr, localport uint16, remotePort uint32, remoteAddress *byte) (err error) {
	r1, _, e1 := syscall.Syscall6(procforwarding_tcp_addEntry.Addr(), 4, uintptr(ptr), uintptr(localport), uintptr(remotePort), uintptr(unsafe.Pointer(remoteAddress)), 0, 0)
	if r1 != 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func forwarding_tcp_removeEntry(ptr uintptr, localport uint16) {
	syscall.Syscall(procforwarding_tcp_removeEntry.Addr(), 2, uintptr(ptr), uintptr(localport), 0)
	return
}
